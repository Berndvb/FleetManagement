// <auto-generated />
using System;
using FleetManagement.EFCore.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FleetManager.EFCore.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210921075629_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FleetManagement.Data.Models.Administratie", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FacturatieDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("GarageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Prijs")
                        .HasColumnType("real");

                    b.Property<DateTime>("UitvoeringsDatum")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GarageId");

                    b.ToTable("Administratie");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Administratie");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.Adres", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Straat")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Adres");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.ChauffeurVoertuig", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AanmaakDatum")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Actief")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AfsluitDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChauffeurId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReadVoertuigId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TankkaartKaartnummer")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChauffeurId");

                    b.HasIndex("ReadVoertuigId");

                    b.HasIndex("TankkaartKaartnummer");

                    b.ToTable("ChauffeurVoertuig");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.Contactgegevens", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdresId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmailAdres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GsmNummer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefoonnummer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdresId");

                    b.ToTable("Contactgegevens");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.File", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdministratieId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdministratieId");

                    b.ToTable("File");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.Garage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bankrekeningnummer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactgegevensId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Naam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ondernemingsnummer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactgegevensId");

                    b.ToTable("Garage");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.IdentiteitPersoon", b =>
                {
                    b.Property<string>("Rijksregisternummer")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Geboortedatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Voornaam")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Rijksregisternummer");

                    b.ToTable("IdentiteitPersoon");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.IdentiteitVoertuig", b =>
                {
                    b.Property<string>("Chassisnummer")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BrandstofType")
                        .HasColumnType("int");

                    b.Property<string>("Merk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nummerplaten")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WagenType")
                        .HasColumnType("int");

                    b.HasKey("Chassisnummer");

                    b.ToTable("IdentiteitVoertuig");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.ReadAanvraag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AanmaakDatum")
                        .HasColumnType("datetime2");

                    b.Property<int>("AanvraagType")
                        .HasColumnType("int");

                    b.Property<string>("ChauffeurId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EersteDatumInplanning")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TweedeDatumInplanning")
                        .HasColumnType("datetime2");

                    b.Property<string>("VoertuigId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChauffeurId");

                    b.HasIndex("VoertuigId");

                    b.ToTable("Aanvragen");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.ReadChauffeur", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContactgegevensId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdentiteitRijksregisternummer")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Indienst")
                        .HasColumnType("bit");

                    b.Property<int>("RijbewijsType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactgegevensId");

                    b.HasIndex("IdentiteitRijksregisternummer");

                    b.ToTable("Chauffeurs");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.ReadListVerzekeringsmaatschappijen", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Verzekeringsmaatschappijen")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Verzekeringsmaatschappijen");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.ReadTankaart", b =>
                {
                    b.Property<string>("Kaartnummer")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AuthenticatieType")
                        .HasColumnType("int");

                    b.Property<bool>("Geblokkeerd")
                        .HasColumnType("bit");

                    b.Property<DateTime>("GeldigheidsDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Pincode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TankkaartOptiesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Kaartnummer");

                    b.HasIndex("TankkaartOptiesId");

                    b.ToTable("Tankkaarten");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.ReadVoertuig", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdentiteitChassisnummer")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Kilometerstanden")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdentiteitChassisnummer");

                    b.ToTable("Voertuigen");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.TankkaartChauffeur", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AanmaakDatum")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Actief")
                        .HasColumnType("bit");

                    b.Property<DateTime>("AfsluitDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChauffeurId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TankkaartKaartnummer")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChauffeurId");

                    b.HasIndex("TankkaartKaartnummer");

                    b.ToTable("TankkaartChauffeur");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.TankkaartOpties", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BrandstofType")
                        .HasColumnType("int");

                    b.Property<string>("ExtraServices")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TankkaartOpties");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.ReadHerstelling", b =>
                {
                    b.HasBaseType("FleetManagement.Data.Models.Administratie");

                    b.Property<DateTime>("DatumVoorval")
                        .HasColumnType("datetime2");

                    b.Property<int>("HerstellingStatus")
                        .HasColumnType("int");

                    b.Property<string>("ReferentieNummer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchadeOmschrijving")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerzekeringsMaatschappij")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoertuigId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("VoertuigId");

                    b.HasDiscriminator().HasValue("ReadHerstelling");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.ReadOnderhoudsbeurt", b =>
                {
                    b.HasBaseType("FleetManagement.Data.Models.Administratie");

                    b.Property<string>("VoertuigId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ReadOnderhoudsbeurt_VoertuigId");

                    b.HasIndex("VoertuigId");

                    b.HasDiscriminator().HasValue("ReadOnderhoudsbeurt");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.Administratie", b =>
                {
                    b.HasOne("FleetManagement.Data.Models.Garage", "Garage")
                        .WithMany()
                        .HasForeignKey("GarageId");

                    b.Navigation("Garage");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.ChauffeurVoertuig", b =>
                {
                    b.HasOne("FleetManagement.Data.Models.ReadChauffeur", "Chauffeur")
                        .WithMany("Voertuigen")
                        .HasForeignKey("ChauffeurId");

                    b.HasOne("FleetManagement.Data.Models.ReadVoertuig", null)
                        .WithMany("Chauffeurs")
                        .HasForeignKey("ReadVoertuigId");

                    b.HasOne("FleetManagement.Data.Models.ReadTankaart", "Tankkaart")
                        .WithMany()
                        .HasForeignKey("TankkaartKaartnummer");

                    b.Navigation("Chauffeur");

                    b.Navigation("Tankkaart");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.Contactgegevens", b =>
                {
                    b.HasOne("FleetManagement.Data.Models.Adres", "Adres")
                        .WithMany()
                        .HasForeignKey("AdresId");

                    b.Navigation("Adres");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.File", b =>
                {
                    b.HasOne("FleetManagement.Data.Models.Administratie", "Administratie")
                        .WithMany("Documenten")
                        .HasForeignKey("AdministratieId");

                    b.Navigation("Administratie");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.Garage", b =>
                {
                    b.HasOne("FleetManagement.Data.Models.Contactgegevens", "Contactgegevens")
                        .WithMany()
                        .HasForeignKey("ContactgegevensId");

                    b.Navigation("Contactgegevens");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.ReadAanvraag", b =>
                {
                    b.HasOne("FleetManagement.Data.Models.ReadChauffeur", "Chauffeur")
                        .WithMany("Aanvragen")
                        .HasForeignKey("ChauffeurId");

                    b.HasOne("FleetManagement.Data.Models.ReadVoertuig", "Voertuig")
                        .WithMany("Aanvragen")
                        .HasForeignKey("VoertuigId");

                    b.Navigation("Chauffeur");

                    b.Navigation("Voertuig");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.ReadChauffeur", b =>
                {
                    b.HasOne("FleetManagement.Data.Models.Contactgegevens", "Contactgegevens")
                        .WithMany()
                        .HasForeignKey("ContactgegevensId");

                    b.HasOne("FleetManagement.Data.Models.IdentiteitPersoon", "Identiteit")
                        .WithMany()
                        .HasForeignKey("IdentiteitRijksregisternummer");

                    b.Navigation("Contactgegevens");

                    b.Navigation("Identiteit");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.ReadTankaart", b =>
                {
                    b.HasOne("FleetManagement.Data.Models.TankkaartOpties", "TankkaartOpties")
                        .WithMany()
                        .HasForeignKey("TankkaartOptiesId");

                    b.Navigation("TankkaartOpties");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.ReadVoertuig", b =>
                {
                    b.HasOne("FleetManagement.Data.Models.IdentiteitVoertuig", "Identiteit")
                        .WithMany()
                        .HasForeignKey("IdentiteitChassisnummer");

                    b.Navigation("Identiteit");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.TankkaartChauffeur", b =>
                {
                    b.HasOne("FleetManagement.Data.Models.ReadChauffeur", "Chauffeur")
                        .WithMany("Tankkaarten")
                        .HasForeignKey("ChauffeurId");

                    b.HasOne("FleetManagement.Data.Models.ReadTankaart", "Tankkaart")
                        .WithMany("Chauffeurs")
                        .HasForeignKey("TankkaartKaartnummer");

                    b.Navigation("Chauffeur");

                    b.Navigation("Tankkaart");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.ReadHerstelling", b =>
                {
                    b.HasOne("FleetManagement.Data.Models.ReadVoertuig", "Voertuig")
                        .WithMany("Herstellingen")
                        .HasForeignKey("VoertuigId");

                    b.Navigation("Voertuig");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.ReadOnderhoudsbeurt", b =>
                {
                    b.HasOne("FleetManagement.Data.Models.ReadVoertuig", "Voertuig")
                        .WithMany("Onderhoudsbeurten")
                        .HasForeignKey("VoertuigId");

                    b.Navigation("Voertuig");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.Administratie", b =>
                {
                    b.Navigation("Documenten");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.ReadChauffeur", b =>
                {
                    b.Navigation("Aanvragen");

                    b.Navigation("Tankkaarten");

                    b.Navigation("Voertuigen");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.ReadTankaart", b =>
                {
                    b.Navigation("Chauffeurs");
                });

            modelBuilder.Entity("FleetManagement.Data.Models.ReadVoertuig", b =>
                {
                    b.Navigation("Aanvragen");

                    b.Navigation("Chauffeurs");

                    b.Navigation("Herstellingen");

                    b.Navigation("Onderhoudsbeurten");
                });
#pragma warning restore 612, 618
        }
    }
}
